#!/usr/bin/perl
use List::Util qw(min);

sub distance {
	$word1 = @_[0];
	$word2 = @_[1];
	$minDistance = @_[2];

	my @DP;
	
	for (my $i = 0; $i <= length($word1); $i++) {
		$DP[0][$i] = $i;
	}
	for (my $j = 0; $j <= length($word2); $j++) {
		$DP[$j][0] = $j;
	}
	
	for (my $i = 1; $i <= length($word1); $i++) {
		for (my $j = 1; $j <= length($word2); $j++) {
			my $cost = 0;
			if (substr($word1,$i-1,1) ne substr($word2,$j-1,1)) {
				$cost = 1;
			}

			$DP[$j][$i] = min($DP[$j-1][$i] +1, $DP[$j][$i-1] +1 , $DP[$j-1][$i-1] + $cost);			
			#print $i . " " .$j . " " .$DP[$j][$i] . "\n";
			
		}
	}
	
	return $DP[length($word2)][length($word1)];


}

sub main {
	print "Enter Sentence : ";
	my $dict = "/usr/share/dict/words";
	open(DICT,"$dict");
	my $line = <>;
	my @words = split(/\ /,$line,-1);
	print "Misspelled World \n";


	foreach my $word ( @words ) {
		$word = lc($word);
		chomp($word);
		my $isFound = 0;

		my $minDistance = 1000;
		my @bestlist = ();
		
		while(<DICT>) {
				$currentWord = lc($_);
				chomp($currentWord);
				$dist = distance($currentWord, $word, $minDistance);
				if ($dist < $minDistance) {
					@bestlist = ();
					$minDistance = $dist;
				}
				if ($dist == $minDistance) {
					push(@bestlist, $currentWord);
				}
		}
		if($#bestlist>1) {
			print "$word : @bestlist\n";
		}
		seek(DICT,0,0); #Seek to start of File
	}
	close(DICT);
}

main();